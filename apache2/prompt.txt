I am building a lab on ansible whose problem statement is: Automate Apache2 Deployment on AWS using Ansible  

Objective  
Your task is to automate the deployment of a web server on an AWS EC2 instance using Ansible. You will configure the instance, set up Apache2, and deploy a simple website.  

---  

Lab Setup Requirements  
1. AWS EC2 Instance:  
   - Launch an Ubuntu 22.04 instance on AWS.  
   - Configure a security group to allow:  
     - SSH access (port 22) from anywhere (`0.0.0.0/0`).  
     - HTTP access (port 80) from anywhere (`0.0.0.0/0`).  
   - Save the SSH private key (`ansible.pem`) to the `inventory/` directory.  

2. Ansible Configuration:  
   - Configure the `inventory/inventory.ini` file to connect to your EC2 instance. Use the provided SSH key and the correct Ansible user.  
   - Write an Ansible playbook (`playbook.yml`) that uses a role to:  
     - Install Apache2.  
     - Copy the provided `index.html` file to the web server directory.  

3. Website Deployment:  
   - Ensure the `index.html` file (provided in `roles/install-apache/tasks/`) is deployed to `/var/www/html/` with proper ownership and permissions.  

---  

Folder Structure  
```  
.  
├── inventory  
│   ├── ansible.pem          <-- EC2 private key (you must place it here)  
│   └── inventory.ini                <-- Define your EC2 instance connection details here  
├── playbook.yml     <-- Ansible playbook to trigger the role  
└── roles  
    ├── install-apache  
    │   └── tasks  
    │       ├── index.html   <-- Pre-written HTML file (do not modify)  
    │       └── main.yml     <-- Define tasks for Apache setup here  
```  

---  

Tasks to Complete  
1. Configure the Inventory File:  
   - In `inventory/inventory.ini`, define your EC2 instance’s public DNS under the `[apacheserver]` group.  
   - Specify the SSH private key path and the Ansible user (ubuntu).  

2. Write the Playbook:  
   - Complete `playbook.yml` to execute the `install-apache` role on all hosts.  

3. Define the Role Tasks:  
   - In `roles/install-apache/tasks/main.yml`, add tasks to:  
     - Install Apache2 using the `apt` module.  
     - Copy `index.html` to `/var/www/html/` with `ubuntu` ownership under 'ubuntu' group and permission `0644`.  

---  

Validation Steps  
After completing the tasks:  
1. Run the playbook:  
   ```  
   ansible-playbook -i inventory/inventory.ini playbook.yml
   ```  
2. Verify the website is accessible at:  
   `http://<EC2_Public_IP>`  
3. Confirm Apache2 is installed and running on the EC2 instance.  

Step 1: Check Installation
Run the following command to see if Apache2 is installed:
   ```  
   apache2 -v
   ```  
This should display the version of Apache2. If you receive a "command not found" error, Apache2 is not installed.

Step 2: Check Service Status
Verify if the Apache2 service is running:
   ```  
   sudo systemctl status apache2
   ```  
Sample success output(Look for a status like "active(running)" in the output):
● apache2.service - The Apache HTTP Server
   Loaded: loaded (/lib/systemd/system/apache2.service; enabled; vendor preset: enabled)
   Active: active (running) since Mon 2025-04-01 23:59:02 IST; 5min ago
     Docs: https://httpd.apache.org/docs/2.4/
 Main PID: 1234 (apache2)
    Tasks: 6 (limit: 4915)
   Memory: 15.3M
   CGroup: /system.slice/apache2.service
           ├─1234 /usr/sbin/apache2 -k start
           ├─1235 /usr/sbin/apache2 -k start
           └─1236 /usr/sbin/apache2 -k start

---  
Success Criteria  
- The EC2 instance is reachable via Ansible.  
- Apache2 is installed, and the service is running.  
- The `index.html` file is served correctly via the web server.  
..........files given to the students:
 content of roles/install-apache/tasks/index.html: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sample Index Page</title>
</head>
<body>
        <h1>I am learning Ansible with Vlab</h1>
</body>
</html>......content of roles/install-apache/tasks/main.yml is: ---
- name: Install apache httpd
  # add your code here

- name: Copy file with owner and permissions
  # add your code here......content of playbook.yml is: ---
- name: Install Apache2
 # add your code here
 .....now the correct student solution should look like this: roles/install-apache/tasks/main.yml: ---
- name: Install apache httpd
  ansible.builtin.apt:
    name: apache2
    state: present
    update_cache: yes

- name: Copy file with owner and permissions
  ansible.builtin.copy:
    src: index.html
    dest: /var/www/html
    owner: ubuntu
    group: ubuntu
    mode: '0644'..........playbook.yml: ---
- name: Install Apache2
  hosts: all
  become: yes
  roles:
    - install-apache........and inventory.ini: [apacheserver]
<public ip of ec2 instance> ansible_user=ubuntu ansible_ssh_private_key_file=inventory/ansible.pem
......now I want to build a python autograder for this lab which will check if the student has done the lab correctly or not..i have a autograder code for a different lab but you need to follow the structure and ideas and logic of the given script and use it in the current lab...autograder.py:  import json
import os
import subprocess
import requests
import configparser

def execute_command(command):
    """Execute a shell command and return the output and error."""
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            check=True,
            executable='/bin/bash'
        )
        return result.stdout.strip(), None
    except subprocess.CalledProcessError as e:
        return None, f"Error: {e.stderr.strip()}"

def parse_inventory():
    """Parse inventory.ini to get EC2 connection details"""
    config = configparser.ConfigParser(allow_no_value=True)
    config.read('inventory/inventory.ini')
    
    ec2_host = None
    user = 'ubuntu'
    key_path = 'inventory/ansible.pem'
    
    if 'webserver' in config:
        for host in config['webserver']:
            parts = host.split()
            if parts:
                ec2_host = parts[0]
                for param in parts[1:]:
                    if param.startswith('ansible_user='):
                        user = param.split('=')[1]
                    elif param.startswith('ansible_ssh_private_key_file='):
                        key_path = param.split('=')[1]
                break
    
    if not ec2_host:
        raise ValueError("EC2 host not found in inventory.ini")
    
    return ec2_host, user, key_path

def run_remote_command(command, key_path, user, host):
    """Execute a command on the EC2 instance via SSH"""
    ssh_cmd = f"ssh -i {key_path} -o StrictHostKeyChecking=no {user}@{host} '{command}'"
    return execute_command(ssh_cmd)

def verify_prerequisites(key_path, user, host):
    """Verify required packages are installed"""
    packages = ['curl', 'ca-certificates', 'gnupg']
    for pkg in packages:
        out, err = run_remote_command(f"dpkg -s {pkg}", key_path, user, host)
        if not out or 'Status: install ok installed' not in out:
            return False, f"{pkg} not installed"
    return True, "All prerequisites installed"

def verify_nodesource_repo(key_path, user, host):
    """Verify NodeSource repository exists"""
    # First check if the repository file exists
    out, err = run_remote_command(
        "[ -f /etc/apt/sources.list.d/nodesource.list ] && echo exists",
        key_path, user, host
    )
    if out != "exists":
        return False, "NodeSource repo file missing"
    return True, "NodeSource repo configured"

def verify_nodejs_installed(key_path, user, host):
    """Verify Node.js version 22.x"""
    out, err = run_remote_command("node --version", key_path, user, host)
    if out and out.startswith('v22.'):
        return True, f"Node.js {out} installed"
    return False, "Node.js 22.x not installed"

def verify_npm_version(key_path, user, host):
    """Verify npm version 10.9.2"""
    out, err = run_remote_command("npm --version", key_path, user, host)
    if out and out == '10.9.2':
        return True, f"npm {out} installed"
    return False, "npm 10.9.2 not installed"

def verify_app_directory(key_path, user, host):
    """Verify app directory permissions"""
    # First check if directory exists
    out, err = run_remote_command(
        "[ -d /home/ubuntu/app ] && echo exists",
        key_path, user, host
    )
    if out != "exists":
        return False, "App directory missing"

    # Check permissions with properly quoted format string
    out, err = run_remote_command(
        'stat -c "%U:%G %a" /home/ubuntu/app',  # Double quotes for format
        key_path, user, host
    )
    if out == 'ubuntu:ubuntu 755':
        return True, "App directory configured"
    return False, f"Invalid permissions: {out if out else 'Check failed'}"

def verify_app_files(key_path, user, host):
    """Verify application files copied"""
    out, err = run_remote_command(
        "[ -f /home/ubuntu/app/app.js ] && [ -f /home/ubuntu/app/package.json ] && echo exists",
        key_path, user, host
    )
    if out == 'exists':
        return True, "Application files present"
    return False, "Missing application files"

def verify_dependencies(key_path, user, host):
    """Verify npm dependencies installed"""
    out, err = run_remote_command(
        "test -d /home/ubuntu/app/node_modules && echo exists",
        key_path, user, host
    )
    if out == 'exists':
        return True, "Dependencies installed"
    return False, "node_modules missing"

def verify_app_running(host):
    """Verify application responds on port 5000"""
    try:
        response = requests.get(f"http://{host}:5000", timeout=5)
        if response.text.strip() == 'Node-Express App using Ansible':
            return True, "Application accessible"
        return False, "Unexpected response content"
    except Exception as e:
        return False, f"Connection failed: {str(e)}"

def main():
    overall = {"data": []}
    data = []
    
    try:
        ec2_host, user, key_path = parse_inventory()
    except Exception as e:
        # If inventory parsing fails, fail all tests
        test_result = {
            "testid": "Inventory Configuration",
            "status": "failure",
            "score": 0,
            "maximum marks": 8,
            "message": f"Inventory error: {str(e)}"
        }
        overall["data"].append(test_result)
        with open('evaluate.json', 'w') as f:
            json.dump(overall, f, indent=4)
        return

    # Run Ansible playbook first
    playbook_cmd = f"ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory/inventory.ini playbook.yml"
    pb_out, pb_err = execute_command(playbook_cmd)
    
    test_cases = [
        {
            "testid": "Install prerequisites",
            "verify_function": verify_prerequisites,
            "args": (key_path, user, ec2_host),
            "maximum_marks": 1
        },
        {
            "testid": "Add NodeSource repository",
            "verify_function": verify_nodesource_repo,
            "args": (key_path, user, ec2_host),
            "maximum_marks": 1
        },
        {
            "testid": "Install Node.js",
            "verify_function": verify_nodejs_installed,
            "args": (key_path, user, ec2_host),
            "maximum_marks": 1
        },
        {
            "testid": "Install npm 10.9.2",
            "verify_function": verify_npm_version,
            "args": (key_path, user, ec2_host),
            "maximum_marks": 1
        },
        {
            "testid": "Create app directory",
            "verify_function": verify_app_directory,
            "args": (key_path, user, ec2_host),
            "maximum_marks": 1
        },
        {
            "testid": "Copy application files",
            "verify_function": verify_app_files,
            "args": (key_path, user, ec2_host),
            "maximum_marks": 1
        },
        {
            "testid": "Install dependencies",
            "verify_function": verify_dependencies,
            "args": (key_path, user, ec2_host),
            "maximum_marks": 1
        },
        {
            "testid": "Application running on port 5000",
            "verify_function": verify_app_running,
            "args": (ec2_host,),
            "maximum_marks": 1
        }
    ]

    for test in test_cases:
        test_result = {
            "testid": test["testid"],
            "status": "failure",
            "score": 0,
            "maximum marks": test["maximum_marks"],
            "message": ""
        }

        try:
            success, message = test["verify_function"](*test["args"])
            if success:
                test_result["status"] = "success"
                test_result["score"] = test["maximum_marks"]
            test_result["message"] = message
        except Exception as e:
            test_result["message"] = f"Verification error: {str(e)}"
        
        data.append(test_result)

    # Save results
    overall['data'] = data
    with open('evaluate.json', 'w') as f:
        json.dump(overall, f, indent=4)

if __name__ == "__main__":
    # Set strict permissions for the private key
    os.chmod('inventory/ansible.pem', 0o400)
    main()....modify the script according to our current setting 